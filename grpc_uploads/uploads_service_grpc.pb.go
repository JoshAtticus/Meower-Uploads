// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: uploads_service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Uploads_ClaimFile_FullMethodName  = "/uploads.Uploads/ClaimFile"
	Uploads_DeleteFile_FullMethodName = "/uploads.Uploads/DeleteFile"
	Uploads_ClearFiles_FullMethodName = "/uploads.Uploads/ClearFiles"
)

// UploadsClient is the client API for Uploads service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploadsClient interface {
	// Claim a file
	ClaimFile(ctx context.Context, in *ClaimFileReq, opts ...grpc.CallOption) (*ClaimFileResp, error)
	// Delete a file
	DeleteFile(ctx context.Context, in *DeleteFileReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Clear a user's files
	ClearFiles(ctx context.Context, in *ClearFilesReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type uploadsClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadsClient(cc grpc.ClientConnInterface) UploadsClient {
	return &uploadsClient{cc}
}

func (c *uploadsClient) ClaimFile(ctx context.Context, in *ClaimFileReq, opts ...grpc.CallOption) (*ClaimFileResp, error) {
	out := new(ClaimFileResp)
	err := c.cc.Invoke(ctx, Uploads_ClaimFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadsClient) DeleteFile(ctx context.Context, in *DeleteFileReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Uploads_DeleteFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadsClient) ClearFiles(ctx context.Context, in *ClearFilesReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Uploads_ClearFiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploadsServer is the server API for Uploads service.
// All implementations must embed UnimplementedUploadsServer
// for forward compatibility
type UploadsServer interface {
	// Claim a file
	ClaimFile(context.Context, *ClaimFileReq) (*ClaimFileResp, error)
	// Delete a file
	DeleteFile(context.Context, *DeleteFileReq) (*emptypb.Empty, error)
	// Clear a user's files
	ClearFiles(context.Context, *ClearFilesReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedUploadsServer()
}

// UnimplementedUploadsServer must be embedded to have forward compatible implementations.
type UnimplementedUploadsServer struct {
}

func (UnimplementedUploadsServer) ClaimFile(context.Context, *ClaimFileReq) (*ClaimFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimFile not implemented")
}
func (UnimplementedUploadsServer) DeleteFile(context.Context, *DeleteFileReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedUploadsServer) ClearFiles(context.Context, *ClearFilesReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearFiles not implemented")
}
func (UnimplementedUploadsServer) mustEmbedUnimplementedUploadsServer() {}

// UnsafeUploadsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploadsServer will
// result in compilation errors.
type UnsafeUploadsServer interface {
	mustEmbedUnimplementedUploadsServer()
}

func RegisterUploadsServer(s grpc.ServiceRegistrar, srv UploadsServer) {
	s.RegisterService(&Uploads_ServiceDesc, srv)
}

func _Uploads_ClaimFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadsServer).ClaimFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uploads_ClaimFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadsServer).ClaimFile(ctx, req.(*ClaimFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uploads_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadsServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uploads_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadsServer).DeleteFile(ctx, req.(*DeleteFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uploads_ClearFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearFilesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadsServer).ClearFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Uploads_ClearFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadsServer).ClearFiles(ctx, req.(*ClearFilesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Uploads_ServiceDesc is the grpc.ServiceDesc for Uploads service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Uploads_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uploads.Uploads",
	HandlerType: (*UploadsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClaimFile",
			Handler:    _Uploads_ClaimFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _Uploads_DeleteFile_Handler,
		},
		{
			MethodName: "ClearFiles",
			Handler:    _Uploads_ClearFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uploads_service.proto",
}
